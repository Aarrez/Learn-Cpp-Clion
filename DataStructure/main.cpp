#include "main.h"int m_numbers[] {10, 50, 100, 500, 1000, 5000};using namespace sorting_algorithms;void create_vector_list(std::vector<std::vector<int>> &two_vector){    const int s = (sizeof(m_numbers)/ sizeof(int));    for(int a = 0; a < s; a++)    {        two_vector.resize(s);        two_vector[a].reserve(m_numbers[a]);        int* size {&m_numbers[a]};        auto seed {time(nullptr)};        std::default_random_engine generator(seed);        std::uniform_int_distribution distribution(1, *size);        for (int i = 0; i < *size; ++i)        {            two_vector[a].insert(two_vector[a].begin() + i, distribution(generator));        }    }}int main(){    const auto start = std::chrono::system_clock::now();    std::vector<std::vector<int>> heap_vector, merge_vector, quick_vector;    std::vector<std::vector<int>> bubble_sort, count_sort, insertion_sort, selection_sort;    create_vector_list(heap_vector);    create_vector_list(merge_vector);    create_vector_list(quick_vector);    create_vector_list(bubble_sort);    create_vector_list(count_sort);    create_vector_list(insertion_sort);    create_vector_list(selection_sort);    constexpr int data_count = sizeof(m_numbers)/sizeof(int);    M_S_A msa(10, data_count);    // Sort unsorted vector    //Advanced sorting algorithms    msa.invoke_Algorithm(heap_vector,  &heap_sort_func);    msa.invoke_Algorithm(merge_vector, &merge_sort_func);    msa.invoke_Algorithm(quick_vector, &quick_sort_func);    /*Deprecated code    msa.h_Measure_Sort(heap_vector);    msa.m_Measure_Sort(merge_vector);    msa.q_Measure_Sort(quick_vector);    */    //Simple sorting algorithms    msa.invoke_Algorithm(bubble_sort, &bubble_sort_func);    msa.invoke_Algorithm(count_sort,  &count_sort_func);    msa.invoke_Algorithm(insertion_sort, &insertion_sort_func);    msa.invoke_Algorithm(selection_sort, &selection_sort_func);    /* Deprecated code    msa.b_Measure_Sort(bubble_sort);    msa.c_Measure_Sort(count_sort);    msa.i_Measure_Sort(insertion_sort);    msa.s_Measure_Sort(selection_sort);    */    // populate_sorting_table(msa.table_content);    print_table(msa.avrage_table, "SortingTables/Unsorted_Avrage.txt", "Unsorted Vector Avrage Result");    print_table(msa.median_table, "SortingTables/Unsorted_Median.txt", "Unsorted Vector Median Result");    print_table(msa.max_table, "SortingTables/Unsorted_Max.txt", "Unsorted Vector Max Result");    print_table(msa.min_table, "SortingTables/Unsorted_Min.txt", "Unsorted Vector Min Result");    //Sort sorted vector    //Advanced sorting algorithms    msa.invoke_Algorithm(heap_vector,  &heap_sort_func);    msa.invoke_Algorithm(merge_vector, &merge_sort_func);    msa.invoke_Algorithm(quick_vector, &quick_sort_func);    //Simple sorting algorithms    msa.invoke_Algorithm(bubble_sort, &bubble_sort_func);    msa.invoke_Algorithm(count_sort,  &count_sort_func);    msa.invoke_Algorithm(insertion_sort, &insertion_sort_func);    msa.invoke_Algorithm(selection_sort, &selection_sort_func);    print_table(msa.avrage_table, "SortingTables/Sorted_Avrage.txt", "Sorted Vector Avrage Result");    print_table(msa.median_table, "SortingTables/Sorted_Median.txt", "Sorted Vector Median Result");    print_table(msa.max_table, "SortingTables/Sorted_Max.txt", "Sorted Vector Max Result");    print_table(msa.min_table, "SortingTables/Sorted_Min.txt", "Sorted Vector Min Result");    const auto goal = std::chrono::system_clock::now();    const std::chrono::duration<double> d = (goal - start);    std::cout << "Time in seconds : " << d.count() << std::endl;    return 0;};