#include "main.h"using namespace sorting_Algorithms;void create_vector_list(std::vector<std::vector<int>> &two_vector){    int m_numbers[] {10, 50, 100, 500, 1000, 5000};    int s = (sizeof(m_numbers)/ sizeof(int));    for(int a = 0; a < s; a++)    {        two_vector.resize(s);        two_vector[a].reserve(m_numbers[a]);        int size = m_numbers[a];        unsigned seed = time(nullptr);        std::default_random_engine generator(seed);        std::uniform_int_distribution distribution(1, size);        for (int i = 0; i < size; ++i)        {            two_vector[a].insert(two_vector[a].begin() + i, distribution(generator));        }    }}int main(){    std::vector<std::vector<int>> heap_vector, merge_vector, quick_vector;    create_vector_list(heap_vector);    // create_vector_list(merge_vector);    // create_vector_list(quick_vector);    M_S_A msa(5);    std::cout << "Heap sort: " << std::endl;    msa.h_measure_sort(heap_vector);    // std::cout << "\nMerge sort: " << std::endl;    // msa.m_measure_sort(merge_vector);    // std::cout << "\nQuick sort: " << std::endl;    // msa.q_measure_sort(quick_vector);    // std::cout << "Bubble sort: " << std::endl;    // msa.h_measure_sort(heap_vector);    // std::cout << "\nCount sort: " << std::endl;    // msa.m_measure_sort(merge_vector);    // std::cout << "\nInsertion sort: " << std::endl;    // msa.i_measure_sort(quick_vector);    // std::cout << "\nSelection sort: " << std::endl;    // msa.s_measure_sort(quick_vector);    populate_sorting_table(msa.table_content);    return 0;}