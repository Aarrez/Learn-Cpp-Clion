#include "main.h"int m_numbers[] {10, 50, 100, 500, 1000, 5000};using namespace sorting_algorithms;void create_vector_list(std::vector<std::vector<int>> &two_vector){    const int s = (sizeof(m_numbers)/ sizeof(int));    for(int a = 0; a < s; a++)    {        two_vector.resize(s);        two_vector[a].reserve(m_numbers[a]);        int* size {&m_numbers[a]};        auto seed {time(nullptr)};        std::default_random_engine generator(seed);        std::uniform_int_distribution distribution(1, *size);        for (int i = 0; i < *size; ++i)        {            two_vector[a].insert(two_vector[a].begin() + i, distribution(generator));        }    }}int main(){    auto start = std::chrono::system_clock::now();    std::vector<std::vector<int>> heap_vector, merge_vector, quick_vector;    std::vector<std::vector<int>> bubble_sort, count_sort, insertion_sort, selection_sort;    create_vector_list(heap_vector);    create_vector_list(merge_vector);    create_vector_list(quick_vector);    create_vector_list(bubble_sort);    create_vector_list(count_sort);    create_vector_list(insertion_sort);    create_vector_list(selection_sort);    constexpr int data_count = sizeof(m_numbers)/sizeof(int);    M_S_A msa(10, data_count);    // Sort unsorted vector    //Advanced sorting algorithms    msa.H_Measure_Sort(heap_vector);    msa.M_Measure_Sort(merge_vector);    msa.Q_Measure_Sort(quick_vector);    //Simple sorting algorithms    msa.B_Measure_Sort(bubble_sort);    msa.C_Measure_Sort(count_sort);    msa.I_Measure_Sort(insertion_sort);    msa.S_Measure_Sort(selection_sort);    populate_sorting_table(msa.table_content);    // //Sort sorted vector    // //Advanced sorting algorithms    // msa.H_Measure_Sort(heap_vector);    // msa.M_Measure_Sort(merge_vector);    // msa.Q_Measure_Sort(quick_vector);    //    // //Simple sorting algorithms    // msa.B_Measure_Sort(bubble_sort);    // msa.C_Measure_Sort(count_sort);    // msa.I_Measure_Sort(insertion_sort);    // msa.S_Measure_Sort(selection_sort);    //    // populate_sorting_table(msa.table_content);    auto goal = std::chrono::system_clock::now();    std::chrono::duration<double> d = (goal - start);    std::cout << "Time in seconds : " << d.count() << std::endl;    return 0;}